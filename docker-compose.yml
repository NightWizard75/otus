# версия синтаксиса
version: '3.9'

# назначаем папки, которые при пробросе будут брать данные из контейнера
volumes:
  mysql-data:
    driver: local
  mysql-log:
    driver: local
  mysql-conf:
    driver: local
# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  # Контейнер с PHP (application - просто имя)
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: otus/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    # переменные окружения
    environment:
      MEMPROF_PROFILE: 1 # нужно для профилирования памяти
      PHP_IDE_CONFIG: "serverName=Docker"
      PHPREDIS_VERSION: "3.0.0"
    volumes:
      # для проброски кода
      - ./code:/var/www/html/otus.loc
      # пробрасываем файл конфигурации php.ini
      # отказался от идеи, т.к. происходит замещение файлов в /conf.d в которую при сборке добавляются модули от установок прописанных в Dockerfile при сборке образа.
      # - ./fpm/conf/php:/usr/local/etc/php
      # но проброс в другую папку, чтобы потом при необходимости из нее запустить батник, который скопирует из проброшенной папки php.ini и перезапустит php-fpm
      - ./fpm/conf/php:/usr/local/etc/php_from_host
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #контейне с Nginx
  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: otus/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./code:/var/www/html/otus.loc
    networks:
      - app-network

  # контейнер с MySQL
  # строим на базе стандартного образа
  mysql:
    image: mysql:5.7.22
    container_name: db
    ports:
      - "3306:3306"
    # описываем, какую БД мы создаём
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      # - ./dbdata:/var/lib/mysql
      - ./storage/docker/mysql:/var/lib/mysql
      # - ./log/docker/mysql:/var/log/mysql
    networks:
      - app-network

  # контейнер с Postgres
  # строим на базе стандартного образа
  pgsql:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DATABASE=${DB_NAME}
    ports:
      - 54321:5432
    volumes:
      - ./storage/docker/postgres:/docker-entrypoint-initdb.d/
      - ./log/docker/postgres:/var/log/postgresql

  #Контейнер Redis
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: otus/redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/conf/redis/etc:/usr/local/etc/redis
      - ./storage/docker/redis/data:/data
      - ./log/docker/redis/:/log
    networks:
      - app-network

  #Контейнер MemCache
  memcached:
    build:
      context: ./memcache
      dockerfile: Dockerfile
    image: otus/memcache
    container_name: memcache
    ports:
      - "11211:11211"
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge